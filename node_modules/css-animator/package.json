{
  "_args": [
    [
      {
        "raw": "css-animator",
        "scope": null,
        "escapedName": "css-animator",
        "name": "css-animator",
        "rawSpec": "",
        "spec": "latest",
        "type": "tag"
      },
      "/Volumes/data/TEST project/ionicEcommerce"
    ]
  ],
  "_from": "css-animator@latest",
  "_id": "css-animator@2.2.0",
  "_inCache": true,
  "_location": "/css-animator",
  "_nodeVersion": "6.11.2",
  "_npmOperationalInternal": {
    "host": "s3://npm-registry-packages",
    "tmp": "tmp/css-animator-2.2.0.tgz_1512377121359_0.9058353863656521"
  },
  "_npmUser": {
    "name": "fabiandev",
    "email": "hi@fabiandev.io"
  },
  "_npmVersion": "5.4.1",
  "_phantomChildren": {},
  "_requested": {
    "raw": "css-animator",
    "scope": null,
    "escapedName": "css-animator",
    "name": "css-animator",
    "rawSpec": "",
    "spec": "latest",
    "type": "tag"
  },
  "_requiredBy": [
    "#USER",
    "/"
  ],
  "_resolved": "https://registry.npmjs.org/css-animator/-/css-animator-2.2.0.tgz",
  "_shasum": "f91e0d93151ed51d0559f2c3cd42d976a43a21d7",
  "_shrinkwrap": null,
  "_spec": "css-animator",
  "_where": "/Volumes/data/TEST project/ionicEcommerce",
  "author": {
    "name": "Fabian Pirklbauer",
    "email": "hi@fabiandev.io"
  },
  "bugs": {
    "url": "https://github.com/fabiandev/css-animator/issues"
  },
  "dependencies": {},
  "description": "Animate elements using CSS classes with support for Angular2.",
  "devDependencies": {
    "@angular/animations": "^4.2.2",
    "@angular/common": "^4.2.2",
    "@angular/compiler": "^4.2.2",
    "@angular/compiler-cli": "^4.2.2",
    "@angular/core": "^4.2.2",
    "@angular/platform-browser": "^4.2.2",
    "@angular/platform-browser-dynamic": "^4.2.2",
    "@angular/platform-server": "^4.2.2",
    "@types/core-js": "^0.9.43",
    "animate.css": "^3.5.2",
    "del": "^3.0.0",
    "gulp": "^3.9.1",
    "gulp-file": "^0.3.0",
    "gulp-filter": "^5.0.0",
    "gulp-rename": "^1.2.2",
    "gulp-sourcemaps": "^2.6.0",
    "gulp-typescript": "^3.1.7",
    "gulp-uglify": "^3.0.0",
    "lodash.assign": "^4.0.7",
    "merge2": "^1.0.2",
    "normalize.css": "^5.0.0",
    "reflect-metadata": "^0.1.10",
    "run-sequence": "^1.2.2",
    "rxjs": "^5.0.1",
    "source-map-loader": "^0.2.1",
    "ts-loader": "^2.0.1",
    "typescript": "^2.3.4",
    "webpack": "^3.0.0",
    "webpack-angular-externals": "^1.0.2",
    "webpack-stream": "^3.2.0",
    "zone.js": "^0.8.4"
  },
  "directories": {},
  "dist": {
    "integrity": "sha512-gifWk8nof+VvbFUnQj9Y69RwRd68y8HGLDO+5QV94aOxXWuw8NVT/P7izePpYNhQ0O75uypwAn4nS+ormVCx0Q==",
    "shasum": "f91e0d93151ed51d0559f2c3cd42d976a43a21d7",
    "tarball": "https://registry.npmjs.org/css-animator/-/css-animator-2.2.0.tgz"
  },
  "gitHead": "946892617af88827d66e0e7610a5aa920435ed5e",
  "homepage": "https://github.com/fabiandev/css-animator#readme",
  "keywords": [
    "angular",
    "angular2",
    "animation",
    "animate",
    "directive",
    "css",
    "animate.css"
  ],
  "license": "MIT",
  "main": "index.js",
  "maintainers": [
    {
      "name": "fabiandev",
      "email": "hi@fabiandev.io"
    }
  ],
  "name": "css-animator",
  "optionalDependencies": {},
  "readme": "# css-animator\n\nThis package was created out of the need for using CSS animations with a library like [animate.css](https://github.com/daneden/animate.css) in Angular2 when there was no useful animation builder available yet.  \n\ncss-animator works with any JavaScript application and takes the pain out of applying CSS animations\nmanually. It also takes care of positioning elements that are being animated, among other useful things.\n\nFeel free to [open an issue](https://github.com/fabianweb/css-animator/issues/new) if you're experiencing issues, or if you have any suggestions or comments.  \n\nThe package includes ES5 compiled files, alongside TypeScript typings and source maps. Also UMD bundle files are included.\n\n## In the Wild\n\n[Mind your Maths](https://play.google.com/store/apps/details?id=mind.your.maths) (Android App)  \n[Devdactic - How to Add Animations To Your Ionic App](http://devdactic.com/animations-ionic-app/) (Tutorial)  \n[Devdactic - How to Add Animations To Your Ionic App](https://www.youtube.com/watch?v=8pOsJDZbJk0) (Video Tutorial)  \n[Ionic Academy - Include CSS+JS Files from NPM Packages with Ionic](https://ionicacademy.com/ionic-include-css-files-from-npm/) (Tutorial)\n\nDid you see css-animator in the wild? [Let me know](https://github.com/fabiandev/css-animator/issues/new)!\n\n# Installation\n\n```bash\n$ yarn add css-animator\n```\n\n```bash\n$ npm install --save css-animator\n```\n\n```bash\n$ jspm install npm:css-animator\n```\n\n# Example\n\n`css-animator` is being used in the project [angular2-quiz-app](https://github.com/fabiandev/angular2-quiz-app).  \n\nA very basic example can be found in the [`docs/`](/docs) folder, which is also hosted on GitHub Pages: https://fabiandev.github.io/css-animator/\n\n# Usage\n\nUse this package in combination with CSS animations.  \nA library like [animate.css](https://github.com/daneden/animate.css) already offers a lot of great animations out of the box.  \n\nYou can install both packages by running:\n\n```bash\n$ yarn add css-animator animate.css\n```\n\n## Basic Usage\n\nYou can use css-animator without Angular2. Just import the class and animate any `HTMLElement`.\n\n```ts\nimport { AnimationBuilder } from 'css-animator/builder';\n\nlet animator = new AnimationBuilder();\n\nanimator.setType('shake').animate(element);\n```\n\nWant to know when an animation has finished? The AnimationBuilder instance returns a promise:\n\n```ts\nanimator\n  .setType('shake')\n  .animate(element)\n  .then(() => {\n    // Animation finished\n  })\n  .catch(() => {\n    // Animation interrupted\n  });\n```\n\nYou may also change the default options for every instance that is created once changed:\n\n```ts\nimport { AnimationBuilder } from 'css-animator/builder';\n\nAnimationBuilder.defaults.fixed = true;\nAnimationBuilder.defaults.duration = 1500;\n```\n\n## Angular Usage\n\nBefore getting started and to make use of the directive and the service provided by css-animator,\nyou have to import its module:\n\n```ts\nimport { NgModule } from '@angular/core';\nimport { BrowserModule } from '@angular/platform-browser';\nimport { AppComponent } from './app.component';\nimport { AnimatorModule } from 'css-animator';\n\n@NgModule({\n  imports: [\n    BrowserModule,\n    AnimatorModule\n  ],\n  declarations: [\n    AppComponent\n  ],\n  bootstrap: [\n    AppComponent\n  ],\n})\nexport class AppModule { }\n```\n\n### Angular Service\n\nThere is a little Angular2 service included, that gives you the power of dependency injection out of the box.\n\n```ts\nimport { Component, OnInit } from '@angular/core';\nimport { AnimationService, AnimationBuilder } from 'css-animator';\n\n@Component({ ... })\nexport class SomeComponent implements OnInit {\n\n  private animator: AnimationBuilder;\n\n  constructor(animationService: AnimationService, private elementRef: ElementRef) {\n    this.animator = animationService.builder();\n  }\n\n  ngOnInit() {\n    this.animator.setType('fadeInUp').show(this.elementRef.nativeElement);\n  }\n\n}\n```\n\n### Angular Directive\n\nFeel free to create your own directive around css-animator. For you to get started, there is one included in this package.\n\n```ts\nimport { Component } from '@angular/core';\n\n@Component({\n  selector: 'my-app',\n  template: `\n    <div animates #animation=\"animates\">\n      <span (click)=\"animation.start({type: 'bounce'})\">Click me!</span>\n    </div>\n  `\n})\nexport class AppComponent {\n\n}\n```\n\nIt is possible to default options on the element, that will be used if you call `animation.start()`.\nYou can pass any option that the interface `AnimationOptions` supports like this: `animation.start({type: 'bounce', duration: 800})`.\n\n```html\n<div\nanimates\n#animation=\"animates\"\nanimates=\"{ type: 'wobble', duration: '2000' }\" // default options are optional\nanimatesInitMode=\"show\" // Can be used with [animatesOnInit] for \"show\" or \"hide\"\n[animatesOnInit]=\"{ type: 'fadeInUp' }\" // automatically animate on init (optional)\n(click)=\"animation.start()\"\n(mouseleave)=\"animation.pause()\"\n(mouseenter)=\"animation.resume()\"\n>\n</div>\n```\n\n> You can also animate host elements with css-animator!\n\n# API\n\n## AnimationOptions\n\nBelow are all options supported by css-animator. You may notice, that all [CSS animation properties](https://developer.mozilla.org/en/docs/Web/CSS/animation) are included, so you can look up which values are supported, where the options `delay` and `duration` have to be set as numbers in `ms` (e.g. `1000` for one second).  \n\nThe `animation-name` is currently not supported, as `type` is as set as class.\n\n```ts\nexport interface AnimationOptions {\n\n  // General settings:\n  fixed?: boolean;\n  reject?: boolean;\n  useVisibility?: boolean;\n  pin?: boolean;\n\n  // Animation type set as class:\n  type?: string;\n\n  // Animation settings:\n  fillMode?: string;\n  timingFunction?: string;\n  playState?: string;\n  direction?: string;\n  duration?: number;\n  delay?: number;\n  iterationCount?: number|string;\n\n}\n```\n\n> The `delay` option is an exception and won't be set as CSS animation property,\n> as delays are handled via JavaScript timeouts. If you really want to\n> use the CSS rule, you can call `applyDelayAsStyle` to apply the delay immediately on the element.  \n\n### Change Options\n\nYou can change the options on an `AnimationBuilder` instance in three different ways.\nYou can also change the defaults for future instances.\n\n#### Change defaults for future instances\n\n```ts\nimport { AnimationBuilder } from 'css-animator/builder';\n\nAnimationBuilder.defaults.type = 'bounce';\nAnimationBuilder.defaults.duration = '1500';\n\nlet animator = new AnimationBuilder();\n```\n\nChanging the defaults won't affect instances, that have already been created.\n\n#### Using chainable set functions\n\n```ts\nanimator\n  .setType('bounce')\n  .setDuration(1500);\n```\n\n#### Using setters\n\n```ts\nanimator.type = 'bounce';\n\nif (animator.duration < 1500) {\n  animator.duration = 1500;\n}\n```\n\n#### Using setOptions\n\n```ts\nanimator.setOptions({\n  type: 'bounce',\n  duration: 1500\n});\n```\n\n#### Apply an option\n\nYou can apply options, that are related to the animation itself.\nSupported options are: `fillMode`, `timingFunction`, `playState`,\n`direction`, `duration` and `iterationCount`.  \n\nSettings that are applied are immediately set on the element, without the need for starting an animation or saving them on the instance. css-animator can't take care of resetting the element though, so be careful with this feature.\n\n```ts\nanimator\n  .applyIterationCount(element, 3);\n```\n\nYou can also save a value and apply it afterwards:\n\n```ts\nanimator\n  .setIterationCount(3)\n  .applyIterationCount(element);\n```\n\n### Options\n\n#### fixed (default: false)\n\nAs mentioned above, elements being animated are positioned `absolute`. If you want to change\nthe position mode to `fixed`, set the fixed option to `true`.\n\n> Setting this option to true results in a more accurate positioning, as `css-animator`\n> won't round to the nearest full pixel (integer instead of float). But keep in mind,\n> that you might experience unexpected behavior when scrolling while an element is being animated.\n\n#### reject (default: true)\n\nThe promise for an animation is rejected with `animation_aborted`, if it is interrupted somehow. To change\nthis behavior, set the `reject` option to `false`.\n\n#### useVisibility\n\n`AnimationBuilder` uses the `hidden` attribute on elements to hide them. If you want to use the `visibility` CSS rule,\nset `useVisibility` to `true`.\n\n#### pin (default: true)\n\nBy default, an element will be positioned `absolute` while animating, to enable concurrent animations.\nAlso the relative position (`top` and `left`) will be calculated and set on the element and the `margin` is set to `0px`.\nFurthermore the element's calculated `width` and `height` will be set explicitly.\nIf you want css-animator to only apply the animation, without changing the element's style temporarily, set `pin` to `false`.\n\n#### type (default: 'shake')\n\nThe class that will be applied to the element alongside `animated` and `animated-show`, if the element is being shown, or `animated-hide`, if the element is being hidden.\n\n#### fillMode (default: 'none')\n\nSee [CSS animation properties](https://developer.mozilla.org/en/docs/Web/CSS/animation).\n\n#### timingFunction (default: 'ease')\n\nSee [CSS animation properties](https://developer.mozilla.org/en/docs/Web/CSS/animation).\n\n#### playState (default: 'running')\n\nSee [CSS animation properties](https://developer.mozilla.org/en/docs/Web/CSS/animation).\n\n#### direction (default: 'normal')\n\nSee [CSS animation properties](https://developer.mozilla.org/en/docs/Web/CSS/animation).\n\n#### duration (default: 1000)\n\nSet the animation duration as integer in ms.\n\n#### delay (default: 0)\n\nSet a delay, before the animation should start as integer in ms.\n\n#### iterationCount (default: 1)\n\nSee [CSS animation properties](https://developer.mozilla.org/en/docs/Web/CSS/animation).\n\n## AnimationBuilder\n\n#### animate\n\n```ts\nanimate(element: HTMLElement, mode = AnimationMode.Animate): Promise<HTMLElement>\n```\n\nSimply animate an element.\n\n#### show\n\n```ts\nshow(element: HTMLElement): Promise<HTMLElement>\n```\n\nAnimate an element, that was previously hidden.  \n\nCalling `show` is equivalent to:\n\n```ts\nimport { AnimationMode } from 'css-animator/builder';\nanimator.animate(element, AnimationMode.Show);\n```\n\n#### hide\n\n```ts\nhide(element: HTMLElement): Promise<HTMLElement>\n```\n\nAdds the attribute `hidden` to the element after the animation has finished.\nYou may need to add something like `[hidden] { display: none; }` to your CSS.  \n\nAgain you can also use the `animate` function by passing `AnimationMode.Hide`.\n\n#### stop\n\n```ts\nstop(element: HTMLElement, reset = true): Promise<HTMLElement>\n```\n\n#### setOptions\n\nStop the current animation on an element, reset it's position, reject the promise and remove the event listener that listens for animation end.\n\n```ts\nsetOptions(options: AnimationOptions): AnimationBuilder\n```\n\nSet multiple options at once.\n\n#### set{Option}\n\n```ts\nset{Option}(option: string|number|boolean): AnimationBuilder\n```\n\nYou may set options individually like `setDuration(500)`\n\n#### addAnimationClass\n\n```ts\naddAnimationClass(name: string): AnimationBuilder\n```\n\nAdds your custom classes while animating alongside the classes `animated` `animated-{mode}` (where mode is `show`, `hide` or `default`, unless you pass another string to the `animate` method).\n\n#### removeAnimationClass\n\n```ts\nremoveAnimationClass(name: string): AnimationBuilder\n```\n\nWon't add classes for future animations, previously added with `addAnimationClass`.\n\n> You can also directly apply options without saving it to the animation builder by using `apply{Option}(options: string|number)`  \n> Also there are getters and setters for each option, you can access with `animator.{option}`.\n\n#### reset\n\n```ts\nreset(element: HTMLElement, removePending = true, rejectTimeouts = false, rejectListeners = false): void\n```\n\n#### dispose\n\n```ts\ndispose(): void\n```\n\nRemoves all elements, timeouts and listeners. Call if you don't want to use the builder anymore:\n\n```ts\nlet animator = new AnimationBuilder();\nanimator.dispose();\nanimator = null;\n```\n\n## AnimatesDirective\n\n#### start\n\n```ts\nstart(options?: AnimationOptions): Promise<HTMLElement>\n```\n\nAnimates the element.\n\n#### show\n\n```ts\nshow(options?: AnimationOptions): Promise<HTMLElement>\n```\n\nShows an element that was hidden.\n\n#### hide\n\n```ts\nhide(options?: AnimationOptions): Promise<HTMLElement>\n```\n\nHides an element by adding the attribute `hidden` to the element after the animation has finished.\nYou may need to add something like `[hidden] { display: none; }` to your CSS.\n\n#### stop\n\n```ts\nstop(): void\n```\n\nStops the current animation on an element, resets it's position, and removes the event listener that listens for animation end.\n\n#### startOrStop\n\n```ts\nstartOrStop(options?: AnimationOptions)\n```\n\nCalls `start` if the element was already started and stop otherwise.\n\n#### pause\n\n```ts\npause(): void\n```\n\nPauses the animation (sets the playState option to `paused`).\n\n#### resume\n\n```ts\nresume(): void\n```\n\nResumes a previously paused animation (sets the playState option to `running`).\n\n#### toggle\n\n```ts\ntoggle(): void\n```\n\nSwitches between `pause()` and `resume()`.\n\n# Build css-animator\n\n```sh\n$ git clone https://github.com/fabiandev/css-animator.git\n$ cd css-animator\n$ yarn && yarn build\n```\n",
  "readmeFilename": "README.md",
  "repository": {
    "type": "git",
    "url": "git+https://github.com/fabiandev/css-animator.git"
  },
  "scripts": {
    "build": "ngc -p tsconfig-aot.json && gulp build"
  },
  "version": "2.2.0"
}
