{
  "_args": [
    [
      {
        "raw": "ng-lazyload-image@3.3.6",
        "scope": null,
        "escapedName": "ng-lazyload-image",
        "name": "ng-lazyload-image",
        "rawSpec": "3.3.6",
        "spec": "3.3.6",
        "type": "version"
      },
      "/Volumes/data/TEST project/ionicEcommerce"
    ]
  ],
  "_from": "ng-lazyload-image@3.3.6",
  "_id": "ng-lazyload-image@3.3.6",
  "_inCache": true,
  "_location": "/ng-lazyload-image",
  "_nodeVersion": "9.0.0",
  "_npmOperationalInternal": {
    "host": "s3://npm-registry-packages",
    "tmp": "tmp/ng-lazyload-image-3.3.6.tgz_1512239680342_0.7516361752059311"
  },
  "_npmUser": {
    "name": "tjoskar",
    "email": "mr.karlsson.oskar@gmail.com"
  },
  "_npmVersion": "5.5.1",
  "_phantomChildren": {},
  "_requested": {
    "raw": "ng-lazyload-image@3.3.6",
    "scope": null,
    "escapedName": "ng-lazyload-image",
    "name": "ng-lazyload-image",
    "rawSpec": "3.3.6",
    "spec": "3.3.6",
    "type": "version"
  },
  "_requiredBy": [
    "#USER",
    "/"
  ],
  "_resolved": "https://registry.npmjs.org/ng-lazyload-image/-/ng-lazyload-image-3.3.6.tgz",
  "_shasum": "436c6facaef6361bf2eefe35252b0a0f535340c5",
  "_shrinkwrap": null,
  "_spec": "ng-lazyload-image@3.3.6",
  "_where": "/Volumes/data/TEST project/ionicEcommerce",
  "author": {
    "name": "Oskar Karlsson",
    "email": "kontakta@oskarkarlsson.nu"
  },
  "bugs": {
    "url": "https://github.com/tjoskar/ng-lazyload-image/issues"
  },
  "dependencies": {},
  "description": "Lazy image loader for Angular > v2",
  "devDependencies": {},
  "directories": {},
  "dist": {
    "integrity": "sha512-DcirRx2CsfBTvnei0Azv/r9RE3HA0GKeDb2gvPGUDX/iBTvTaRVwx8uIzx3PyyJv4MFHS+P18QGqWriTiIgDSQ==",
    "shasum": "436c6facaef6361bf2eefe35252b0a0f535340c5",
    "tarball": "https://registry.npmjs.org/ng-lazyload-image/-/ng-lazyload-image-3.3.6.tgz"
  },
  "homepage": "https://github.com/tjoskar/ng-lazyload-image#readme",
  "keywords": [
    "lazy-load",
    "lazy-image",
    "angular"
  ],
  "license": "MIT",
  "main": "index.js",
  "maintainers": [
    {
      "name": "tjoskar",
      "email": "mr.karlsson.oskar@gmail.com"
    }
  ],
  "name": "ng-lazyload-image",
  "optionalDependencies": {},
  "peerDependencies": {
    "@angular/core": ">=2.0.0",
    "rxjs": ">=5.0.0"
  },
  "readme": "## ng-lazyload-image\n\n> Lazy image loader for Angular â‰¥ v2\n\n[![Build Status](https://travis-ci.org/tjoskar/ng-lazyload-image.svg?branch=master)](https://travis-ci.org/tjoskar/ng-lazyload-image) [![npm version](https://badge.fury.io/js/ng-lazyload-image.svg)](https://badge.fury.io/js/ng-lazyload-image)\n[![npm](https://img.shields.io/npm/l/ng-lazyload-image.svg?maxAge=2592000)]()\n\n[![Build Status](https://saucelabs.com/browser-matrix/tjoskar.svg)](https://saucelabs.com/beta/builds/c7a7d7683d6843f79ae4118f737769c5)\n\nAbout 150 loc and no dependencies (except for angular and rxjs of course)\n\nDemo: http://tjoskar.github.io/ng-lazyload-image/\n\n### Requirement\nThe browser you targeting need to have support of `WeakMap` and `String.prototype.includes`. If you need to support an older browser (like IE) you will need to include polyfill for `WeakMap` and `String.prototype.includes` (see https://github.com/zloirock/core-js for example).\n\n### Installation\n```\n$ npm install ng-lazyload-image --save\n```\n\nAnd then include it in your module (see [app.module.ts](https://github.com/tjoskar/ng-lazyload-image/blob/master/example/app.module.ts)):\n```javascript\nimport { NgModule } from '@angular/core';\nimport { BrowserModule } from '@angular/platform-browser';\nimport { LazyLoadImageModule } from 'ng-lazyload-image';\nimport { AppComponent } from './app.component';\n\n@NgModule({\n    declarations: [ AppComponent ],\n    imports: [ BrowserModule, LazyLoadImageModule ],\n    bootstrap: [ AppComponent ]\n})\nexport class MyAppModule {}\n```\n\n### Usages\n\n```javascript\nimport { Component } from '@angular/core';\n\n@Component({\n    selector: 'image',\n    template: `\n        <img [defaultImage]=\"defaultImage\" [lazyLoad]=\"image\" [offset]=\"offset\">\n    `\n})\nclass ImageComponent {\n    defaultImage = 'https://www.placecage.com/1000/1000';\n    image = 'https://images.unsplash.com/photo-1443890923422-7819ed4101c0?fm=jpg';\n    offset = 100;\n}\n```\n\nIt also supports background images, by using `backgroundImage`:\n\n```javascript\n@Component({\n    selector: 'image',\n    template: `\n        <div [defaultImage]=\"defaultImage\" [lazyLoad]=\"image\" [offset]=\"offset\"></div>\n        <!--\n        After it has been loaded the div will transform into:\n        <div class=\"ng-lazyloaded\" style=\"background-image: url('https://images.unsplash.com/photo-1443890923422-7819ed4101c0?fm=jpg');\"></div>\n        -->\n    `\n})\nclass ImageComponent {\n    defaultImage = 'https://www.placecage.com/1000/1000';\n    image = 'https://images.unsplash.com/photo-1443890923422-7819ed4101c0?fm=jpg';\n    offset = 100;\n}\n```\n\nYou can (from 3.3.0) load image async or change the url on the fly, eg.\n```html\n<img [lazyLoad]=\"image$ | async\">\n```\n\nIf you are using Ionic 2 you may need to include your own scroll observable or change the scroll target.\n\n```javascript\n@Component({\n    selector: 'page-image',\n    template: `\n      <ion-content #container padding>\n        <img [defaultImage]=\"https://www.placecage.com/1000/1000\" [lazyLoad]=\"lazyLoadImage\" [scrollObservable]=\"container.ionScroll\" />\n      </ion-content>\n    `\n})\nexport class AboutPage {\n    lazyLoadImage = 'https://hd.unsplash.com/photo-1431400445088-1750c997c6b5';\n}\n```\n\nSee example folder for more usages.\n\n### API\n\n##### lazyLoad\n\nType: `string`\n\nExample: `https://images.unsplash.com/photo-1443890923422-7819ed4101c0?fm=jpg`\n\nThe image to be lazy loaded. This image will replace the default image (`defaultImage`).\n\n##### defaultImage (optional)\n\nType: `string`\n\nExample: `https://www.placecage.com/1000/1000`\n\nPath to default image. This image will be loaded right away.\n\nYou can also use `src` attribute for img tag to define default image:  \n`<img src=\"https://www.placecage.com/1000/1000\" [lazyLoad]=\"lazyLoadImage\" />`\n\nor `background-image` property for non-image tags:  \n`<div style=\"background-image: url('https://www.placecage.com/1000/1000');\" [lazyLoad]=\"lazyLoadImage\"></div>`\n\n\n##### errorImage (optional)\n\nType: `string`\n\nExample: `https://i.imgur.com/XkU4Ajf.png`\n\nAn image to be loaded if failing to load `lazyLoad`. Will load the default image (`defaultImage`) if absent.\n\n##### offset (optional)\n\nType: `number`\n\nExample: `100`\n\nDefault: `0`\n\nNumber of px a image should be loaded before it is in view port\n\n##### scrollTarget (optional)\n\nType: `Element`\n\nExample: `document.getElementById('my-scroll-container')`\n\nDefault: `window`\n\nYou will need to set this property if you are using a scroll container and do not propagate the scroll event to window.\n\n##### scrollObservable (optional)\n\nType: `Observable`\n\nExample: `Observable.fromEvent(myScrollContainer, 'scroll')`\n\nYou can pass your own observable if you need more control over the flow. Can be useful if integrating with other frameworks like ionic.\n\n### Events\n\n##### onLoad (optional)\n\nType: `Function: (success: boolean) => void`\n\nExample: `<img [lazyLoad]=\"lazyLoadImage\" (onLoad)=\"myCallbackFunction($event)\">`\n\nYou can pass a callback function, which will be called when the image is loaded.\n\n### Develop\nRun `unit` tests:\n```\n$ npm test\n```\n\nRun `e2e` tests:\n```\n$ npm run webdriver:update\n$ npm run e2e\n```\n",
  "readmeFilename": "README.md",
  "repository": {
    "type": "git",
    "url": "git+https://github.com/tjoskar/ng-lazyload-image.git"
  },
  "version": "3.3.6"
}
